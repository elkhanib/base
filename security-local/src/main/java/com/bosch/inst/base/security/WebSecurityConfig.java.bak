package com.bosch.inst.esurvey.base.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
//    @Autowired
//    private DataSource dataSource;

//    @Autowired
//    private IUserService userService;

//    @Autowired
//    private SecurityPasswordEncoder passwordEncoder;

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .formLogin().disable() // disable form authentication
                .anonymous().disable() // disable anonymous user
                .httpBasic().and()
                // restricting access to authenticated users
                .authorizeRequests().anyRequest().authenticated();
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();
//        auth.userDetailsService(userService)
//                .passwordEncoder(passwordEncoder);


//                .and()
//                .jdbcAuthentication();
//                .dataSource(dataSource)
//                .usersByUsernameQuery("select user_name as username, password, 'true' as enabled from `c_account_info` where user_name = ?")
//                .authoritiesByUsernameQuery("select user_name as username, null as role from `c_account_info` where user_name = ?");
//        auth.jdbcAuthentication().dataSource(dataSource)
//                .usersByUsernameQuery("select user_name as username, password, 'true' as enabled from `c_account_info` where user_name = ?")
//                .authoritiesByUsernameQuery("select user_name as username, null as role from `c_account_info` where user_name = ?")

        auth.inMemoryAuthentication() // creating user in memory
                .withUser("user")
                .password(encoder.encode("password")).roles("USER")
                .and().withUser("admin")
                .password(encoder.encode("password")).authorities("ROLE_ADMIN");
    }

    @Override
    @Bean
    public AuthenticationManager authenticationManagerBean() throws Exception {
        // provides the default AuthenticationManager as a Bean
        return super.authenticationManagerBean();
    }
}